
************************************************************************************
Zac Corbit Challenge


#def buildKey(Kl,Kc):  return [str(hex(ord((string.ascii_lowercase[Kl:]+string.ascii_lowercase[:Kl])[x])))[2:]+str(hex(ord(list(reversed((string.ascii_uppercase[-Kc:]+string.ascii_uppercase[:-Kc])))[x])))[2:] for x in range(0,26)]
#def decode(msg):
#   d = msg.split("Z")
#   return "".join([string.ascii_lowercase[buildKey(int(d[1][:2]),int(d[1][2:])).index(x)] if x != "0x0x" else " " for x in ["".join(e) for e in izip_longest(*([iter(d[2])]*4))]])


*************************************************************************************
Chris Griffin Challenge
HOW TO: 

###
# Put base 64 into zip file
###

import base64

with open('zipped.zip', 'wb') as f:
    f.write(base64.b64decode(data))

###
# Extract zipfile
###

import zipfile

zipfile.ZipFile('zipped.zip').extractall('test')

###
# Find and run the server
###

import os
# just to keep it all in python, but could open terminal / file explorer

os.listdir('test')
# ['success']

os.listdir('test/success')
# ['fun_server.py', '______.py']

import subprocess

proc = subprocess.Popen("python test/success/fun_server.py", shell=True)

###
# Find what port it's running on
###

# I would use netstat, but this keeps it in python

import socket
from contextlib import closing

ports_open = []

for i in range(1024, 20001): # range of possible ports it will be on, could be added to question
    with closing(socket.socket(socket.AF_INET, socket.SOCK_STREAM)) as sock:
        if sock.connect_ex(("localhost", i)) == 0:
            ports_open.append(i)

print(ports_open)

###
# Read the message on the port
###

# Again, I would just use a web browser or requests, but here is a pure python check

import httplib

for port in ports_open:
    host = httplib.HTTPConnection('localhost', port, timeout=1)
    host.connect()
    host.request("GET", "/")
    print(host.getresponse().read())

# You should know which is the right response :)

proc.kill()

*******************************************************************************************
Matthew Cundari Challenge:
#!/usr/bin/env python
#Weirdpcap solve
#By Matthew Cundari
from scapy.all import *

#write the pcap to a file, scapy complains if there is not an actual file...
pcap64 = ###question data goes here###
pcapfile = open('weirdpcap.pcap','wb')
pcapfile.write(pcap64.decode('base64'))
pcapfile.close()

#read pcap
p = rdpcap('weirdpcap.pcap')

#grab the Most Significant Byte of the tcp checksum, decode the given string as zip, profit
print ''.join([chr(x['IP']['TCP'].chksum>>8) for x in p]).decode('zip')

*******************************************************************************************
Dale Anderson Challenge:

#!/usr/bin/env python
#!/usr/bin/env python -tt
import re
import gzip
import codecs
from oletools.olevba import *

# Grab the game data
gd = #gamedata
# Create a bytearray from the gamedata
ba = bytearray(gd)
# Make a file-like thing of the read bytes
fio = cStringIO.StringIO(ba)
# Open the file-like-thing as a gzipped file
fio = gzip.GzipFile(fileobj=fio).read()
# Create a VBA parsing object 
vbaparser = VBA_Parser('dummy', data=fio)
# Reveal the VBA code
rev = vbaparser.reveal()
# Extrat the Base64 encoded xcript
b64 = re.findall(r'((?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4}){4,})',rev)
# Close the parser
vbaparser.close()
# Decode the encoded string as UTF-16 (Powershell encodes base64 differently)
script = codecs.decode(b64[0],'base64').decode('UTF-16')
# Grab the third line
answer = script.split('\n')[2]
# Submit answer


**************************************************************************************************
Wayne Marsh - Infogroke 
Answer blurb 

def answer(d):
    encrypted, basekey = d

    # Try bases 1-49
    candidates = []
    for base in range(3, 50):
        # Convert the key to the candidate base...
        key = convert_base_string(basekey, base)

        # ...XOR the encrypted text with that key
        round1 = xor_string(encrypted, key)

        # ..XOR that result with the base
        round2 = xor_string(round1, base)

        # Count the number of 'normal' looking characters and store this candidate
        candidates.append((round2, base, count_normal_characters(round2)))

    # Choose the candidate with the highest amount of normal characters
    best = sorted(candidates, key=lambda x: x[2])[-1]
    return (best[0], best[1])

## Support functions below ##

# Count the regular-looking characters in a string, so we can get a rough idea if it's a properly-decrypted plaintext
def count_normal_characters(s):
    normal = 0

    # count a-z
    for i in range(ord('a'), ord('z') + 1):
        normal += len([c for c in s if chr(i) in s])

    return normal

# Convert a number string to an integer in a specific base
def convert_base_string(num, base):
    # Convert a digit in a numeric string up to base32 into an integer value (e.g. '4' = 4, 'a' = 10, 'g' = 18)
    def digit_to_value(dig):
        assert(len(dig) == 1)
        if dig in '0123456789':
            return int(dig)
        else:
            return ord(dig) - ord('a') + 10

    num = num[::-1]
    total = 0
    baseIdx = 0
    for dig in num:
        total += digit_to_value(dig) * pow(base, baseIdx)
        baseIdx += 1
    return total

# XOR each character of a string with a value
def xor_string(s, key):
    out = ""
    for c in s:
        out += chr(ord(c)^key)
    return out

*******************************************************************************************************

Alexandre D'Hondt

1. Data reversal

    >>> import magic
    >>> with open("file", 'rb') as f:
            data = f.read()
    >>> magic.from_buffer(data)
    'data'
    >>> data = data[::-1]
    >>> magic.from_buffer(data)
    'gzip compressed data, [...]

2. Decompression rounds

    >>> import gzip
    >>> with open("temp", 'wb') as f:
            f.write(data)
    >>> with gzip.open("temp", 'rb') as f:
            data = f.read()
    >>> magic.from_buffer(data)
    'XZ compressed data'

    From there, the goal is to script a function that can recursively decompress the following formats: 7z, arj, bz2,gz, shell,tar, xz, zip

3. During the decompression, some rounds provide a second file which is empty and has an name in hex format. Gathering these filenames, you get the password of the file decompressed in the final round, a password-protected PDF with the answer.

    >>> from PyPDF2 import PdfFileReader, PdfFileWriter
    with open("flag.pdf", 'rb') as fin, open("flag-dec.pdf", 'wb') as fout:
        reader, writer = PdfFileReader(fin), PdfFileWriter()
        reader.decrypt("TH1S_1S_4_SUP3R_L0NG_S3CR3T_P455W0RD")
        for i in range(reader.getNumPages()):
            writer.addPage(reader.getPage(i))
        writer.write(fout)


This process is automated by the tool at:

    https://github.com/dhondta/recursive-compression

It is available on PyPi and can be installed with the following command: 

    pip install recursive-compression

You can decompress the data using:

    $ python
    [...]
    >>> with open("file", 'rb') as f:
            f.write(data)
    >>> exit()
    $ rec-decomp file
    12:34:56 [WARNING] File found: flag.pdf
    12:34:56 [INFO] Rounds: 1000
    12:34:56 [INFO] File  :
    - flag.pdf (81a723a65c43bbd1c80ded96628e0029989370eec8ea9c124cecc1def9a0fd6b)
    12:34:56 [SUCCESS] Data: TH1S_1S_4_SUP3R_L0NG_S3CR3T_P455W0RD

And you can finally read the PDF by entering the password "TH1S_1S_4_SUP3R_L0NG_S3CR3T_P455W0RD" to get the answer.

*******************************************************************************************************










